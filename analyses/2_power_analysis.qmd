---
title: "Power analysis"
subtitle: "Project ChaT-OS"
author:
  - name: "JÃ¼rgen Schneider"
    email: "ju.schneider@dipf.de"
    affiliation: "DIPF"
    correspondence: true
date: "`r Sys.Date()`" # inserts the date of compiling
editor: source
execute:
  echo: true
  warning: false
  message: false
  cache: false # true will prevent embed-resources
format: 
  html:
    theme: ceruleanc
    number-sections: true
    fontsize: 0.85em
    toc: true
    toc-location: left
    toc-depth: 3
    embed-resources: true # will make standalone html file
    code-fold: false
    code-tools: true
    code-link: true
editor_options: 
  chunk_output_type: console
---

```{r packages}
#| echo: false
library(lavaan)
library(tidyverse)
```

# Models

## Population Model

```{r }
os_sim_model <- "
  appraisal_challe ~ .27*resource_perso_eos +
                    -.27*resource_perso_lva + 
                     .27*resource_perso_exp + 
                     .27*resource_infra
  appraisal_threat ~ -.27*resource_perso_eos + 
                      .27*resource_perso_lva + 
                     -.27*resource_perso_exp + 
                     -.27*resource_infra

  engagement ~ .4*appraisal_challe + 
              -.3*appraisal_threat + 
               .3*resource_perso_eos + 
               .3*resource_perso_lva + 
               .3*resource_perso_exp + 
               .3*resource_infra"
```

## Tested Model
```{r }
os_model <- "
  appraisal_challe ~ lamb1*resource_perso_eos + 
                     lamb2*resource_perso_lva + 
                     lamb3*resource_perso_exp + 
                     lamb4*resource_infra
  appraisal_threat ~ lamb5*resource_perso_eos + 
                     lamb6*resource_perso_lva + 
                     lamb7*resource_perso_exp + 
                     lamb8*resource_infra
 
  engagement ~ lamb9*appraisal_challe + 
               lamb10*appraisal_threat + 
               lamb11*resource_perso_eos + 
               lamb12*resource_perso_lva + 
               lamb13*resource_perso_exp + 
               lamb14*resource_infra

  appraisal_challe ~~ cov1*appraisal_challe
  appraisal_threat ~~ cov2*appraisal_threat
"
```

# Power Analysis

# Set features
```{r }
### SET FEATURES OF POWER ANALYSIS #############################################
# number of simulations
n_sim <- 5000

# lowest sample size
n_min <- 95

# highest sample size
n_max <- 155
  
# steps to be taken between sample sizes
steps <- 5
```

## Computation
```{r }
### EMPTY DATA FRAME FOR RESULTS ###############################################
# make empty data frame to save results for all sample sizes
sim_results <- data.frame(n = as.numeric(),
                          p_lamb01_pow = as.numeric(),
                          p_lamb02_pow = as.numeric(),
                          p_lamb03_pow = as.numeric(),
                          p_lamb04_pow = as.numeric(),
                          p_lamb05_pow = as.numeric(),
                          p_lamb06_pow = as.numeric(),
                          p_lamb07_pow = as.numeric(),
                          p_lamb08_pow = as.numeric(),
                          p_lamb09_pow = as.numeric(),
                          p_lamb10_pow = as.numeric(),
                          p_var_ch_pow = as.numeric(),
                          p_var_th_pow = as.numeric())

### LOOP OVER DIFFERENT SAMPLE SIZES ###########################################
for (n in seq(from = n_min, to = n_max, by = steps)) {
  # make empty data frame to save results within one sample size
  sim_results_n <- data.frame(p_lamb01 = as.numeric(),
                              p_lamb02 = as.numeric(),
                              p_lamb03 = as.numeric(),
                              p_lamb04 = as.numeric(),
                              p_lamb05 = as.numeric(),
                              p_lamb06 = as.numeric(),
                              p_lamb07 = as.numeric(),
                              p_lamb08 = as.numeric(),
                              p_lamb09 = as.numeric(),
                              p_lamb10 = as.numeric(),
                              p_var_ch = as.numeric(),
                              p_var_th = as.numeric())

  ### LOOP OVER n_sim SIMULATIONS ##############################################
  for (i in 1:n_sim) {
    set.seed(123 + i + n)
    sim_data <- lavaan::simulateData(os_sim_model,
                                     sample.nobs = n)  
    fit <- lavaan::sem(os_model, sim_data)
    fit_stand <- summary(fit, standardized = TRUE)
    
    sim_results_n <- sim_results_n |>
      dplyr::add_row(p_lamb01 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb1"],
                     p_lamb02 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb2"],
                     p_lamb03 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb3"],
                     p_lamb04 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb4"],
                     p_lamb05 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb5"],
                     p_lamb06 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb6"],
                     p_lamb07 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb7"],
                     p_lamb08 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb8"],
                     p_lamb09 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb9"],
                     p_lamb10 = fit_stand$pe$pvalue[fit_stand$pe$label == "lamb10"],
                     p_var_ch = fit_stand$pe$pvalue[fit_stand$pe$label == "cov1"],
                     p_var_th = fit_stand$pe$pvalue[fit_stand$pe$label == "cov2"])
  }

sim_results_n <- sim_results_n |>
  dplyr::mutate(p_lamb01_sig = ifelse(p_lamb01 < .05, 1, 0),
                p_lamb02_sig = ifelse(p_lamb02 < .05, 1, 0),
                p_lamb03_sig = ifelse(p_lamb03 < .05, 1, 0),
                p_lamb04_sig = ifelse(p_lamb04 < .05, 1, 0),
                p_lamb05_sig = ifelse(p_lamb05 < .05, 1, 0),
                p_lamb06_sig = ifelse(p_lamb06 < .05, 1, 0),
                p_lamb07_sig = ifelse(p_lamb07 < .05, 1, 0),
                p_lamb08_sig = ifelse(p_lamb08 < .05, 1, 0),
                p_lamb09_sig = ifelse(p_lamb09 < .05, 1, 0),
                p_lamb10_sig = ifelse(p_lamb10 < .05, 1, 0),
                p_var_ch_sig = ifelse(p_var_ch < .05, 1, 0),
                p_var_th_sig = ifelse(p_var_th < .05, 1, 0)) |>
  dplyr::summarize(across(p_lamb01_sig:p_var_th_sig, mean))

sim_results <- sim_results |>
  dplyr::add_row(n = n,
                 p_lamb01_pow = sim_results_n$p_lamb01_sig,
                 p_lamb02_pow = sim_results_n$p_lamb02_sig,
                 p_lamb03_pow = sim_results_n$p_lamb03_sig,
                 p_lamb04_pow = sim_results_n$p_lamb04_sig,
                 p_lamb05_pow = sim_results_n$p_lamb05_sig,
                 p_lamb06_pow = sim_results_n$p_lamb06_sig,
                 p_lamb07_pow = sim_results_n$p_lamb07_sig,
                 p_lamb08_pow = sim_results_n$p_lamb08_sig,
                 p_lamb09_pow = sim_results_n$p_lamb09_sig,
                 p_lamb10_pow = sim_results_n$p_lamb10_sig,
                 p_var_ch_pow = sim_results_n$p_var_ch_sig,
                 p_var_th_pow = sim_results_n$p_var_th_sig)
}
```


## Recoding to calculate power
```{r }
sim_results_long <- sim_results |>
  pivot_longer(p_lamb01_pow:p_var_th_pow, names_to = "variables", values_to = "values") |>
  dplyr::mutate(parameter = str_sub(variables, 1, -5),
                variables = "power") |>
  pivot_wider(id_cols = c(n, parameter), names_from = "variables", values_from = "values")
```

## Result
```{r }
ggplot(sim_results_long, aes(x=n, y=power, color=parameter)) +
  geom_hline(yintercept = .8, color = "darkgrey", linetype = 'dashed', linewidth = 2, alpha = .5) +
  geom_hline(yintercept = .9, color = "darkgrey", linetype = 'dashed', linewidth = 2, alpha = .5) +
  geom_line(linewidth = 1, alpha = .6) +
  theme_minimal()
```

\

**80 % power is achieved for all parameters of interest from 120 participants.**

\
\
\

# Computational environment

## Packages

```{r}
installed.packages()[names(sessionInfo()$otherPkgs), "Version"]
```

## R Version

```{r}
R.Version()
```